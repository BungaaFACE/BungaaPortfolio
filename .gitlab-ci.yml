variables:
  CT_USER: "root"
  PROJECT_NAME: "BungaaPortfolio"
  PROJECT_DIR: "/data/$PROJECT_NAME"
  REMOTE_SERVER: "172.0.0.107"
  SSH_COMMAND: "ssh $CT_USER@$REMOTE_SERVER"
  NPM_HELPER_USER: "root" # USER OF VM WITH NPMHelper
  NPM_HELPER_IP: "172.0.0.106" # IP OF VM WITH NPMHelper (MUST BE AVAILABLE FROM RUNNER VM)

stages:
  - init
  - deploy
  - reset_db


.ssh_prepare: &ssh_prepare
    - mkdir -p ~/.ssh && touch ~/.ssh/known_hosts
    - grep "$REMOTE_SERVER" ~/.ssh/known_hosts && ssh-keygen -R $REMOTE_SERVER || true
    - ssh-keyscan $REMOTE_SERVER >> ~/.ssh/known_hosts
    - eval "$(ssh-agent -s)" && ssh-add ~/.ssh/id_rsa

.ct_prepare: &ct_prepare
    - echo "CT UPDATE && UPGRADE"
    - $SSH_COMMAND "sudo apt update && sudo apt -y upgrade && sudo apt -y autoremove"
    - echo "CT PYTHON3-PIP INSTALL"
    - $SSH_COMMAND "sudo apt -y install python3-pip python3.11-venv redis git"
    - echo "CREATING FOLDER IF NOT EXIST ON CT"
    - $SSH_COMMAND "mkdir -p $PROJECT_DIR"
    - echo "CREATING VENV ON CT"
    - $SSH_COMMAND "test -e $PROJECT_DIR/.venv || /usr/bin/python3 -m venv $PROJECT_DIR/.venv"

.service_prepare: &service_prepare
    - echo "CREATING GUNICORN SERVICE"
    - |
        $SSH_COMMAND "sudo test -e /etc/systemd/system/gunicorn.service || sudo tee /etc/systemd/system/gunicorn.service > /dev/null << EOF
        [Unit]
        Description=gunicorn $PROJECT_NAME
        After=network.target
        [Service]
        User=$CT_USER
        WorkingDirectory=$PROJECT_DIR/
        ExecStart=./.venv/bin/gunicorn config.wsgi -c ./config/gunicorn.conf.py
        [Install]
        WantedBy=multi-user.target
        EOF" && 
        echo "RESTARTING SYSTEMD DAEMON" && 
        $SSH_COMMAND "sudo systemctl daemon-reload" && 
        echo "ENABLING GUNICORN SERVICE" && 
        $SSH_COMMAND "sudo systemctl enable gunicorn.service"

.create_proxy: &create_proxy
    - echo "CHECKING IF PROXY IS CREATED"- echo "CREATING PROXY IF NOT EXISTS"
    - ssh $NPM_HELPER_USER@$NPM_HELPER_IP "/data/NginxProxyManagerHelper/.venv/bin/python /data/NginxProxyManagerHelper/NPMHelper.py --domain portfolio.bungaa-server.ru --forward_host $REMOTE_SERVER --forward_port 8000 --project_name $PROJECT_NAME"

.update_script: &update_script
    - echo "SENDING LAST VERSION TO CT"
    - /usr/bin/sftp -r $CT_USER@$REMOTE_SERVER:$PROJECT_DIR/ <<< $'put ./*'
    - echo "INSTALLING REQUIREMENTS TO CT"
    - ssh $CT_USER@$REMOTE_SERVER "$PROJECT_DIR/.venv/bin/pip install -r $PROJECT_DIR/requirements.txt"

.django_pre: &django_pre
    - echo "MIGRATING LAST DB CHANGES"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py migrate"
    - echo "COLLECTING DJANGO STATIC FILES"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py collectstatic --noinput"
    - echo "ADDING EXPERIENCE TO DB"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py add_experience"
    - echo "ADDING SKILLS TO DB"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py add_skills"

.restart_services: &restart_services
    - echo "RESTARTING GUNICORN"
    - $SSH_COMMAND "sudo systemctl restart gunicorn"

.reset_db: &reset_db
    - echo "DELETING EXISTING DB"
    - $SSH_COMMAND "rm $PROJECT_DIR/db.sqlite3"
    - echo "MIGRATING LAST DB CHANGES"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py migrate"
    - echo "ADDING EXPERIENCE TO DB"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py add_experience"
    - echo "ADDING SKILLS TO DB"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py add_skills"


init_CT_job:
  stage: init
  tags:
    - ct_shell
  script:
    - *ssh_prepare
    - *ct_prepare
    - *service_prepare
    - *create_proxy
  allow_failure: false
  needs: []
  when: manual

deploy_job:
  stage: deploy
  tags:
    - ct_shell
  script:
    - *update_script
    - *django_pre
    - *restart_services
  allow_failure: false
  needs: []
  when: manual

reset_db_job:
  stage: reset_db
  tags:
    - ct_shell
  script:
    - *reset_db
  allow_failure: false
  needs: []
  when: manual