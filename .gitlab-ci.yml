variables:
  CT_USER: "root"
  PROJECT_NAME: "BungaaPortfolio"
  PROJECT_DIR: "/data/$PROJECT_NAME"
  DOMAIN: portfolio.bungaa-server.ru
  REMOTE_SERVER: "172.0.0.107"
  SSH_COMMAND: "ssh $CT_USER@$REMOTE_SERVER"
  NPM_HELPER_USER: "root" # USER OF VM WITH NPMHelper
  NPM_HELPER_IP: "172.0.0.106" # IP OF VM WITH NPMHelper (MUST BE AVAILABLE FROM RUNNER VM)

stages:
  - init
  - init_docker
  - deploy
  - deploy_docker
  - reset_db
  - reset_db_docker


.ssh_prepare: &ssh_prepare
    - mkdir -p ~/.ssh && touch ~/.ssh/known_hosts
    - grep "$REMOTE_SERVER" ~/.ssh/known_hosts && ssh-keygen -R $REMOTE_SERVER || true
    - ssh-keyscan $REMOTE_SERVER >> ~/.ssh/known_hosts
    - eval "$(ssh-agent -s)" && ssh-add ~/.ssh/id_rsa

.ct_prepare: &ct_prepare
    - echo "CT UPDATE && UPGRADE"
    - $SSH_COMMAND "sudo apt update && sudo apt -y upgrade && sudo apt -y autoremove"
    - echo "CT PYTHON3-PIP INSTALL"
    - $SSH_COMMAND "sudo apt -y install python3-pip python3.11-venv redis git nginx"
    - echo "UPDATING PIP SETUPTOOLS"
    - $SSH_COMMAND "python3 -m pip install --upgrade pip setuptools --break-system-packages"
    - echo "CREATING FOLDER IF NOT EXIST ON CT"
    - $SSH_COMMAND "mkdir -p $PROJECT_DIR"
    - echo "CREATING VENV ON CT"
    - $SSH_COMMAND "test -e $PROJECT_DIR/.venv || /usr/bin/python3 -m venv $PROJECT_DIR/.venv"

.install_docker: &install_docker
    - echo "ADDING DOCKER REPO"
    - $SSH_COMMAND "sudo apt install ca-certificates curl"
    - $SSH_COMMAND "sudo install -m 0755 -d /etc/apt/keyrings"
    - $SSH_COMMAND "sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc"
    - $SSH_COMMAND "echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    - $SSH_COMMAND "sudo apt update"
    - echo "INSTALLING DOCKER"
    - $SSH_COMMAND "sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"

.service_prepare: &service_prepare
    - echo "CREATING GUNICORN SERVICE"
    - |
        $SSH_COMMAND "sudo test -e /etc/systemd/system/gunicorn.service || sudo tee /etc/systemd/system/gunicorn.service > /dev/null << EOF
        [Unit]
        Description=gunicorn $PROJECT_NAME
        After=network.target
        [Service]
        Environment="LANG=ru_RU.UTF-8"
        Environment="PROD=True"
        User=$CT_USER
        WorkingDirectory=$PROJECT_DIR/
        ExecStart=$PROJECT_DIR/.venv/bin/gunicorn config.wsgi -c $PROJECT_DIR/config/gunicorn.conf.py
        [Install]
        WantedBy=multi-user.target
        EOF" && 
        echo "RESTARTING SYSTEMD DAEMON" && 
        $SSH_COMMAND "sudo systemctl daemon-reload" && 
        echo "ENABLING GUNICORN SERVICE" && 
        $SSH_COMMAND "sudo systemctl enable gunicorn.service"
    - echo "CONFIGURING INTERNAL NGINX PROXY"
    - |
        $SSH_COMMAND "sudo test -e /etc/nginx/sites-available/$PROJECT_NAME.conf || sudo tee /etc/nginx/sites-available/$PROJECT_NAME.conf > /dev/null << EOF
        http {
          server {
            listen 8000; 
            server_name $DOMAIN 127.0.0.1 $REMOTE_SERVER;
            charset     utf8;
            autoindex   off;
            access_log  /data/logs/nginx_access.log;
            error_log   /data/logs/nginx_error.log error;


            location / {
              proxy_pass http://127.0.0.1:8080;
              proxy_set_header Host \\\$host;
              proxy_set_header X-Real-IP \\\$remote_addr;
              proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;
            }
            location /staticfiles {
                alias /data/staticfiles;
                autoindex on;
            }
          }
        }
        EOF"
    - echo "CREATING SOFT LINK TO SITES-ENABLED FOR PROXY CONFIG"
    - $SSH_COMMAND "sudo ln -s /etc/nginx/sites-available/$PROJECT_NAME.conf /etc/nginx/sites-enabled/$PROJECT_NAME.conf || true"
    - echo "ENABLING AND STARTING NGINX SERVICE"
    - $SSH_COMMAND "sudo systemctl enable nginx"
    - $SSH_COMMAND "sudo systemctl restart nginx"

.service_docker_prepare: &service_docker_prepare
    - echo "CONFIGURING INTERNAL NGINX PROXY"
    - |
        $SSH_COMMAND "sudo tee nginx.conf > /dev/null << EOF
        events {}
        http {
          server {
            listen 8000; 
            server_name $DOMAIN 127.0.0.1 $REMOTE_SERVER;
            charset     utf8;
            autoindex   off;
            access_log  /data/logs/nginx_access.log;
            error_log   /data/logs/nginx_error.log error;


            location / {
              proxy_pass http://django:8080;
              proxy_set_header Host \\\$host;
              proxy_set_header X-Real-IP \\\$remote_addr;
              proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;
            }
            location /staticfiles {
                alias /data/staticfiles;
                autoindex on;
            }
          }
        }
        EOF"
    - echo "ENABLING DOCKER SERVICE"
    - $SSH_COMMAND "sudo systemctl enable --now docker"

.create_proxy: &create_proxy
    - echo "CREATING PROXY IF NOT EXISTS"
    - ssh $NPM_HELPER_USER@$NPM_HELPER_IP "/data/NginxProxyManagerHelper/.venv/bin/python /data/NginxProxyManagerHelper/NPMHelper.py --domain $DOMAIN --forward_host $REMOTE_SERVER --forward_port 8000"


.update_script: &update_script
    - echo "SENDING LAST VERSION TO CT"
    - /usr/bin/sftp -r $CT_USER@$REMOTE_SERVER:$PROJECT_DIR/ <<< $'put ./*'
    - echo "INSTALLING REQUIREMENTS TO CT"
    - ssh $CT_USER@$REMOTE_SERVER "$PROJECT_DIR/.venv/bin/pip install -r $PROJECT_DIR/requirements.txt"
    - echo "CREATING DB FOLDER"
    - ssh $CT_USER@$REMOTE_SERVER "mkdir -p $PROJECT_DIR/db"

.django_pre: &django_pre
    - echo "MIGRATING LAST DB CHANGES"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py migrate"
    - echo "COLLECTING DJANGO STATIC FILES"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py collectstatic --noinput"
    - echo "ADDING EXPERIENCE TO DB"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py add_experience"
    - echo "ADDING SKILLS TO DB"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py add_skills"

.update_docker_script: &update_docker_script
    - echo "SENDING LAST VERSION TO CT"
    - /usr/bin/sftp -r $CT_USER@$REMOTE_SERVER:/data/docker/ <<< $'put ./*'



.restart_services: &restart_services
    - echo "RESTARTING GUNICORN"
    - $SSH_COMMAND "sudo systemctl restart gunicorn"
    - echo "RESTARTING NGINX"
    - $SSH_COMMAND "sudo systemctl restart nginx"

.restart_containers: &restart_containers
    - echo "RESTARTING CONTAINERS"
    - $SSH_COMMAND "sudo docker-compose -f /data/docker/docker-compose.yml down"
    - $SSH_COMMAND "sudo docker-compose -f /data/docker/docker-compose.yml build"
    - $SSH_COMMAND "sudo docker-compose -f /data/docker/docker-compose.yml up -d"


.reset_db: &reset_db
    - echo "DELETING EXISTING DB"
    - $SSH_COMMAND "rm $PROJECT_DIR/db.sqlite3"
    - echo "MIGRATING LAST DB CHANGES"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py migrate"
    - echo "ADDING EXPERIENCE TO DB"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py add_experience"
    - echo "ADDING SKILLS TO DB"
    - $SSH_COMMAND "cd $PROJECT_DIR && ./.venv/bin/python manage.py add_skills"

.reset_docker_db: &reset_docker_db
    - echo "DELETING EXISTING DB"
    - $SSH_COMMAND "rm /data/db/db.sqlite3"


prepare_ssh_job:
  stage: init
  tags:
    - ct_shell
  script:
    - *ssh_prepare
  allow_failure: false
  needs: []
  when: manual

prepare_ssh_docker_job:
  stage: init_docker
  tags:
    - ct_shell
  script:
    - *ssh_prepare
  allow_failure: false
  needs: []
  when: manual

install_packages_job:
  stage: init
  tags:
    - ct_shell
  script:
    - *ct_prepare
    - *service_prepare
  allow_failure: false
  needs: []
  when: manual

install_docker_job:
  stage: init_docker
  tags:
    - ct_shell
  script:
    - *install_docker
    - *service_docker_prepare
  allow_failure: false
  needs: []
  when: manual



deploy_job:
  stage: deploy
  tags:
    - ct_shell
  script:
    - *update_script
    - *django_pre
    - *restart_services
  allow_failure: false
  needs: []
  when: manual

deploy_docker_job:
  stage: deploy_docker
  tags:
    - ct_shell
  script:
    - *update_docker_script
    - *restart_containers
  allow_failure: false
  needs: []
  when: manual

external_proxy_job:
  stage: deploy
  tags:
    - ct_shell
  script:
    - *create_proxy
  allow_failure: false
  needs: []
  when: manual

external_proxy_docker_job:
  stage: deploy_docker
  tags:
    - ct_shell
  script:
    - *create_proxy
  allow_failure: false
  needs: []
  when: manual


reset_db_job:
  stage: reset_db
  tags:
    - ct_shell
  script:
    - *reset_db
    - *restart_services
  allow_failure: false
  needs: []
  when: manual

reset_docker_db_job:
  stage: reset_db_docker
  tags:
    - ct_shell
  script:
    - *reset_db
    - *restart_containers
  allow_failure: false
  needs: []
  when: manual