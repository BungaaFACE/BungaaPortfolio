variables:
  CT_USER: "root"
  REMOTE_SERVER: "172.0.0.107"
  SSH_COMMAND: "ssh $CT_USER@$REMOTE_SERVER"
  NPM_HELPER_USER: "root" # USER OF VM WITH NPMHelper
  NPM_HELPER_IP: "172.0.0.106" # IP OF VM WITH NPMHelper (MUST BE AVAILABLE FROM RUNNER VM)

stages:
  - init
  - install_docker
  - deploy
  - reset_db


.ssh_prepare: &ssh_prepare
    - mkdir -p ~/.ssh && touch ~/.ssh/known_hosts
    - grep "$REMOTE_SERVER" ~/.ssh/known_hosts && ssh-keygen -R $REMOTE_SERVER || true
    - ssh-keyscan $REMOTE_SERVER >> ~/.ssh/known_hosts
    - eval "$(ssh-agent -s)" && ssh-add ~/.ssh/id_rsa

.ct_prepare: &ct_prepare
    - echo "CT UPDATE && UPGRADE"
    - $SSH_COMMAND "sudo apt update && sudo apt -y upgrade && sudo apt -y autoremove"
    - echo "CT PODMAN INSTALL"
    - $SSH_COMMAND "sudo apt -y install podman-docker"
    - echo "CT ENABLING PODMAN"
    - $SSH_COMMAND "sudo systemctl enable --now podman"
    - echo "CREATING FOLDER IF NOT EXIST ON CT"
    - $SSH_COMMAND "mkdir -p /data/logs /data/db /data/staticfiles /data/docker"

.install_docker: &install_docker
    - echo "ADDING DOCKER REPO"
    - $SSH_COMMAND "sudo apt install ca-certificates curl"
    - $SSH_COMMAND "sudo install -m 0755 -d /etc/apt/keyrings"
    - $SSH_COMMAND "sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc"
    - $SSH_COMMAND "echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    - $SSH_COMMAND "sudo apt update"
    - echo "INSTALLING DOCKER"
    - $SSH_COMMAND "sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"

.create_proxy: &create_proxy
    - echo "CREATING PROXY IF NOT EXISTS"
    - ssh $NPM_HELPER_USER@$NPM_HELPER_IP "/data/NginxProxyManagerHelper/.venv/bin/python /data/NginxProxyManagerHelper/NPMHelper.py --domain portfolio.bungaa-server.ru --forward_host $REMOTE_SERVER --forward_port 8000"

.update_script: &update_script
    - echo "SENDING LAST VERSION TO CT"
    - /usr/bin/sftp -r $CT_USER@$REMOTE_SERVER:/data/docker/ <<< $'put ./*'

.restart_containers: &restart_containers
    - echo "RESTARTING CONTAINERS"
    - $SSH_COMMAND "sudo docker-compose -f /data/docker/docker-compose.yml down"
    - $SSH_COMMAND "sudo docker-compose -f /data/docker/docker-compose.yml build"
    - $SSH_COMMAND "sudo docker-compose -f /data/docker/docker-compose.yml up -d"

.reset_db: &reset_db
    - echo "DELETING EXISTING DB"
    - $SSH_COMMAND "rm -r /data/db/*"


init_CT_job:
  stage: init
  tags:
    - ct_shell
  script:
    - *ssh_prepare
    - *ct_prepare
  allow_failure: false
  needs: []
  when: manual

install_docker_job:
  stage: install_docker
  tags:
    - ct_shell
  script:
    - *install_docker
  allow_failure: false
  needs: []
  when: manual

deploy_job:
  stage: deploy
  tags:
    - ct_shell
  script:
    - *update_script
    - *restart_containers
  allow_failure: false
  needs: []
  when: manual

reset_db_job:
  stage: reset_db
  tags:
    - ct_shell
  script:
    - *reset_db
    - *restart_containers
  allow_failure: false
  needs: []
  when: manual